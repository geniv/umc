' Gambas class file

CONST $cmd_dropbox AS String = "Dropbox isn't running!"
CONST $cmd_apache AS String = "Apache is NOT running.\n"
CONST $cmd_apache2 AS String = "Apache2 is NOT running.\n"

'PRIVATE $shutdown AS Process
PRIVATE $cpucount AS Integer
PRIVATE $profiles AS NEW String[]

'pole governor pro cpu
PRIVATE governor AS String[] = ["conservative", "ondemand", "performance", "powersave"]
PUBLIC governorText AS String[] = [("Konzervativně"), ("Podle poptávky"), ("Vysoký výkon"), ("Nízká spotřeba")]

'vnitrni promenn pro gettry
PRIVATE $onlineBat AS Boolean
PRIVATE $batteryVal AS Integer

PRIVATE tray AS TrayIcon

PUBLIC SUB _new()
  DIM pocet, pid AS Integer

  obrazek_jas.Picture = Picture["ikony/jas.png"]
  obrazek_zvuk.Picture = Picture["ikony/sound.png"]
  obrazek_manager.Picture = Picture["ikony/file_manager.png"]
  obrazek_apache.Picture = Picture["ikony/apache.png"]
  obrazek_drop.Picture = Picture["ikony/dropbox.png"]

  casovac.Enabled = TRUE
  casovac.Delay = Settings["settings/timerdelay", 10000]

'FIXME projit program a schromazdit si nazvy vsech utilit ktere jsou tu pouzivane! ab bylo
'mozno se pak na ne ukazat ze existuji.. ty a ty one...

' IF Settings["application/pid", 0] > 0 THEN 
'   DEBUG Message.Question(("program již běží. Opravdu spustit znovu?"), ("spustit"), ("ukončit!"))
' ENDIF 

  ' IF Application.Args[1] = "--help" THEN 
  '   PRINT "ahoj, snazis se ziskat napovedu?? ale marne!!"
  ' ENDIF 

  'kontrola znovu spusteni

  pid = Settings["application/pid", 0]
  IF pid > 0 THEN 
      IF Message.Question(("program již běží. Opravdu spustit znovu?"), ("spustit, a zabit timto již běžící"), ("ukončit toto!")) = 1 THEN 
          TRY SHELL Subst("kill &1", pid) WAIT 'zabiti puvodniho programu
          setPID()  'nastaveni noveho cisla procesu
        ELSE
          ME.Close(1)
      ENDIF 
    ELSE 
      setPID()
  ENDIF 

  'pocet = Spusteno()
  'IF pocet = 1 THEN 
  'ENDIF 

  ' IF pocet > 1 THEN 
  '       ELSE 
  '         
  '     ENDIF 
  '   'Message.Info(Subst(("Program již beží (&1x) a proto bude ukončen."), pocet))
  ' ENDIF 

  'TODO v mastaveni seznam prikazu ktere se maji spustit po spusteni umc na konzole
  ''ukladat toto nataveni do ini!
  '$ qdbusviewer

  'kontrola existenci jednotliych utilit
  panel_jas.Enabled = existJas()
  panel_hlasitost.Enabled = existHlasitost()
  panel_touchpad.Enabled = existTouchepad()
  panel_manager.Enabled = existManager()
  panel_acpi.Enabled = existAcpi()
  panel_webcam.Enabled = existWebcam()
  panel_apache.Enabled = existApache()
  panel_shutdown.Enabled = existShutdown()
  panel_dropbox.Enabled = existDropbox()

  cpuselect.List = governorText
END

PRIVATE SUB setPID()
  Settings["application/pid"] = Application.Id
  Settings.Save()
END


'pocitani spustenych instanci programu
PRIVATE SUB Spusteno() AS Integer
  DIM ret_shell AS String
  'TOD nebo: "ps ax | grep &1"
  SHELL Subst("ps -ef | grep 'gbr' | grep -c '&1'", Application.Name) TO ret_shell
  RETURN CInt(ret_shell) - 1
END


PRIVATE SUB existJas() AS Boolean
  'DIM ret_shell AS String
'dostacuje, ale ne uplne!!
'/proc/acpi/video$ find . -name brightness -exec cat {} \;
'/proc/acpi/video$ find . -name brightness -print -exec cat {} \;
  'SHELL "echo -n $( cat /proc/acpi/video/VGA/$( ls /proc/acpi/video/VGA/ | grep LCD )/brightness )" WAIT TO ret_shell
  'RETURN IIf(ret_shell = "<not supported>", FALSE, TRUE)
  RETURN TRUE 'mozna jen v budoucnu tesotvat pripojeni dbus sbernice
END

PRIVATE SUB existHlasitost() AS Boolean
  DIM ret_shell AS String
  TRY SHELL "which amixer" WAIT TO ret_shell
  RETURN ret_shell
END

PRIVATE SUB existTouchepad() AS Boolean
  DIM ret_shell AS String
  TRY SHELL "which synclient" WAIT TO ret_shell
  RETURN ret_shell
END

PRIVATE SUB existManager() AS Boolean
  DIM ret AS String
  ret = Settings["settings/manager", ""]
  RETURN IIf(ret, TRUE, FALSE)
END

PRIVATE SUB existAcpi() AS Boolean
  DIM ret_shell AS String
  TRY SHELL "which acpi" WAIT TO ret_shell
  RETURN ret_shell
END

PRIVATE SUB existUptime() AS Boolean
  DIM ret_shell AS String
  TRY SHELL "which uptime" WAIT TO ret_shell
  RETURN ret_shell
END

PRIVATE SUB existSit() AS Boolean
  DIM ret_shell AS String
  TRY SHELL "which ip" WAIT TO ret_shell
  RETURN ret_shell
END

PRIVATE SUB existCpu() AS Boolean
  DIM ret_shell AS String
  TRY SHELL "which cpufreq-selector" WAIT TO ret_shell
  RETURN ret_shell
END

PRIVATE SUB existWebcam() AS Boolean
  'komplexni test?!
END

PRIVATE SUB existApache() AS Boolean
  DIM ret_shell AS String
  TRY SHELL "which apache2" WAIT TO ret_shell
  RETURN ret_shell
END

PRIVATE SUB existDropbox() AS Boolean
  DIM ret_shell AS String
  TRY SHELL "which dropbox" WAIT TO ret_shell
  RETURN ret_shell
END

PRIVATE SUB existShutdown() AS Boolean
  DIM ret_shell AS String
  TRY SHELL "which shutdown" WAIT TO ret_shell
  RETURN ret_shell
END

PUBLIC SUB Form_Show()
  ME.X = Settings["application/x", 0]
  ME.Y = Settings["application/y", 0]
END

PUBLIC SUB Form_Open()
  DIM ret_shell AS String
  'nacteni pozice, expanderu
  ME.X = Settings["application/x", 0]
  ME.Y = Settings["application/y", 0]
  ostatni_expander.Hidden = Settings["custom/expander", FALSE]
  'DEBUG ostatni_expander.Hidden
  IF ostatni_expander.Hidden THEN 
    ostatni_expander_Hide()
      ELSE 
    ostatni_expander_Show()
  ENDIF 

  'inicializace programu ktere jsou v pocitaci
  IF existJas() THEN nactiJas()
  IF existHlasitost() THEN nactiHlasitost()
  IF existTouchepad() THEN nactiTouchpad()
  IF existCpu() THEN nactiCpu()
  IF existAcpi() THEN nactiBaterii()
  IF existApache() THEN nactiApache()
  IF existDropbox() THEN nactiDropbox()
  IF existUptime() THEN nactiUptime()
  IF existSit() THEN nactiSit()
  'panel_webcam.Enabled

  shutdown_hour.Text = Hour(Now) + 1
  shutdown_minute.Text = Minute(Now)

  'loadProfile()
  profileselect.Index = Settings["custom/profileindex", 0]
  'nacteni stavu automodu
  autoModCheck.Value = Settings["custom/automode", FALSE]
  autoModCheck_Click()

  runConditionGrid()

  initXrandr()

  'TODO dat spoustet ulohy po spusteni! - ktere jsou nastavene v nastaveni
END

PUBLIC SUB Form_Close()
  'ulozeni pozice, expanderu
  Settings["application/x"] = ME.ScreenX - 1
  Settings["application/y"] = ME.ScreenY - 27
  Settings["application/pid"] = 0
  'DEBUG ostatni_expander.Hidden
  Settings["custom/expander"] = ostatni_expander.Hidden
  Settings["custom/automode"] = autoModCheck.Value
  'saveprofile()
  Settings["custom/profileindex"] = profileselect.Index
  Settings.Save()
  trayclose()
END

PRIVATE SUB initXrandr()
  TRY SHELL "xrandr > /dev/null"
END


'schovani ostatnich polozek
PUBLIC SUB ostatni_expander_Hide()
  ME.Height = 367
  mezera_expander.Visible = FALSE
END

'zobrazeni ostatnich polozek
PUBLIC SUB ostatni_expander_Show()
  ME.Height = 550
  mezera_expander.Visible = TRUE
END

'fyzicke natavovani hlasitosti
PRIVATE SUB nastavHlasitost()
  SHELL Subst("amixer sset Master &1 > /dev/null", hlasitost_slider.Value)
END

'fyzicke nastavovani mute hlasitosti
PRIVATE SUB nastavMuteHlasitost()
  SHELL Subst("amixer sset Master &1 > /dev/null", IIf(hlasitost_ztisit.Value, "off", "on"))
  nactiObrazekHlasitosti()
END

'nastaveni pri zmene hodnoty hlasitosti
PUBLIC SUB hlasitost_slider_Change()
  nastavHlasitost()
END


PUBLIC SUB hlasitost_ztisit_Click()
  nastavMuteHlasitost()
END


'nacte informace z utility pro zvuk
PRIVATE SUB nactiHlasitost()
  DIM ret_shell, kanal AS String
  'zvuk
  SHELL "echo -n $( amixer sget Master | awk -W posix '/Limits/ { print $3 }' )" TO ret_shell
  'DEBUG ret_shell
  hlasitost_slider.MinValue = CInt(ret_shell)
  'hlasitost_slider.MinValue = ret_shell

  SHELL "echo -n $( amixer sget Master | awk -W posix '/Limits/ { print $5 }' )" TO ret_shell
  'DEBUG ret_shell
  hlasitost_slider.MaxValue = CInt(ret_shell)

  SHELL "echo -n $( amixer sget Master | awk -F': ' -W posix '/channels:/ { print $2 }' | awk -F'-' '{ print $1 }' )" TO kanal
  'DEBUG kanal

  SHELL Subst("echo -n $( amixer sget Master | awk -F': ' -W posix '/&1:/ { print $2 }' | awk '{ print $2 }' )", kanal) TO ret_shell
  'DEBUG ret_shell
  hlasitost_slider.Value = CInt(ret_shell)

  SHELL Subst("echo -n $( amixer sget Master | awk -F': ' -W posix '/&1:/ { print $2 }' | awk '{ print $5 }' )", kanal) TO ret_shell
  'DEBUG ret_shell
  hlasitost_ztisit.Value = IIf(ret_shell = "[on]", FALSE, TRUE)
  nactiObrazekHlasitosti()
END


PRIVATE SUB nactiObrazekHlasitosti()
  obrazek_zvuk.Picture = IIf(NOT hlasitost_ztisit.Value, Picture["ikony/sound.png"], Picture["ikony/sound_mute.png"])
END


'nacte informace z utility pro baterii
PRIVATE SUB nactiBaterii()
  DIM ret_shell, stav AS String
  DIM bat_obr AS Integer
  DIM online AS Boolean
  DIM bat_available AS Boolean

  'baterie
  SHELL "echo -n $( acpi | awk -F', ' '{ print $2 }' | awk -F'%' '{ print $1 }' )" TO ret_shell
  IF ret_shell THEN
    baterie_obrazek.Visible = TRUE
    baterie_procento.Text = Subst(("Baterie: &1%"), CInteger(ret_shell))
    $batteryVal = CInteger(ret_shell)
    bat_obr = CInteger((CInteger(ret_shell) / 100) * 10) * 10
    'DEBUG bat_obr
    baterie_obrazek.Picture = Picture[Subst("ikony/baterka/&1.png", bat_obr)]
      ELSE 
    baterie_obrazek.Visible = FALSE
    baterie_procento.Text = ("Baterie nedostupná")
  ENDIF

  bat_available = IIf(ret_shell, TRUE, FALSE)
  profil_panel.Enabled = bat_available

  'nacteni stavu baterie
  SHELL "echo -n $( acpi | awk -F', ' '{ print $1 }' | awk '{ print $3 }' )" TO stav
  'DEBUG stav

  'nacteni stavu adapteru
  SHELL "echo -n $( acpi -a | awk -F': ' '{ print $2 }' )" TO ret_shell
  'DEBUG ret_shell
  online = IIf(ret_shell = "on-line", TRUE, FALSE)
  $onlineBat = online

  IF online THEN 
'TODO dodat blesk nabijeni nejak! az v gambasu3!!
    'obr_blesk = Picture["ikony/baterka/blesk.png"]
    'obr_blesk.Transparent = TRUE
    'obrazek_blesk.Picture = obr_blesk

    IF stav = "Unknown" THEN
      'nabito
      baterie_cas.Text = ("Plně nabito")
        ELSE
      'nabijeni
      SHELL "echo -n $( acpi | awk -F', ' '{ print $3 }' | awk '{ print $1 }' )" TO ret_shell
      'DEBUG ret_shell
      baterie_cas.Text = IIf(ret_shell, Subst(("Nabijení (odhad): &1"), ret_shell), IIf(bat_available, ("Baterie je plně nabita"), ("---")))
    ENDIF 

      ELSE 

    IF stav = "Discharging" THEN
      'vybijeni
      SHELL "echo -n $( acpi | awk -F', ' '{ print $3 }' | awk '{ print $1 }' )" WAIT TO ret_shell
      'DEBUG ret_shell
      baterie_cas.Text = Subst(("Zbývající čas (odhad): &1"), ret_shell)
    ENDIF 

  ENDIF 
END


PUBLIC SUB getBatteryValue() AS Integer
  RETURN $batteryVal
END



PUBLIC SUB isAdapter() AS Boolean
  RETURN $onlineBat
END


PUBLIC SUB getGovernor() AS Integer
  DIM ret_shell AS String
  SHELL "echo -n $( cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor )" WAIT TO ret_shell
  RETURN governor.Find(ret_shell)
END


PUBLIC SUB setGovernor(stav AS String)
  DIM status AS String = governor[governorText.Find(stav)]
  DIM i AS Integer
  'hromadne nastavovani vykonu, pokud jiz neni nastaveno
  IF status <> governor[getGovernor()] THEN
    FOR i = 0 TO $cpucount - 1  'projde vsechyn jadra
      TRY SHELL Subst("cpufreq-selector --cpu &1 --governor '&2'", i, status) WAIT
    NEXT
  ENDIF 
END


'nacte informace z utility pro cpu
PRIVATE SUB nactiCpu()
  DIM ret_shell AS String
  'cpu
  SHELL "echo -n $( cat /proc/cpuinfo | awk -F': ' -W posix '/model name/ { print $2 }' | awk -F'@ ' '{ print $1 }' | head -n 1 )" TO ret_shell
  'DEBUG ret_shell
  cpu_typ.Text = Left(Subst(("Typ: &1"), ret_shell), 20) & "..."
  cpu_typ.ToolTip = Subst(("Typ: &1"), ret_shell)

  'SHELL "echo -n $( cat /proc/cpuinfo | awk -F': ' -W posix '/model name/ { print $2 }' | awk -F'@ ' '{ print $2 }' | head -n 1 )" TO ret_shell
  SHELL "echo -n $( cat /proc/cpuinfo | awk -F': ' -W posix '/bogomips/ { print $2/2 }' | head -n 1 )" TO ret_shell
  'DEBUG ret_shell
  cpu_frekcence.Text = Subst(("Frekvence: &1 MHz"), ret_shell)

  SHELL "echo -n $( cat /proc/cpuinfo | awk -F': ' -W posix '/model name/ { print $2 }' | awk -F'@ ' '{ print $2 }' | wc -l )" TO ret_shell
  $cpucount = ret_shell
  cpu_pocet.Text = Subst(("Počet jader: &1"), ret_shell)

''conservative ondemand userspace powersave performance
  SHELL "echo -n $( cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor )" TO ret_shell
  cpuselect.Index = governor.Find(ret_shell)  'nacteni aktualiho indexu governor
  governorLabel.Text = governorText[cpuselect.Index]
END

'nacte informace z utility pro uptime
PRIVATE SUB nactiUptime()
  DIM ret_shell AS String
  SHELL "echo -n $( uptime | awk -F',  ' '{ print $1 }' )" TO ret_shell
  'DEBUG ret_shell
  uptime_cas.Text = ret_shell
END

'nacte informace z dbus pro jas
PRIVATE SUB nactiJas()
  DIM ret_shell AS String

  SHELL "echo -n $( qdbus org.gnome.PowerManager /org/gnome/PowerManager/Backlight GetBrightness )" WAIT TO ret_shell

  jas_slider.MinValue = 0
  jas_slider.MaxValue = 100
  jas_slider.PageStep = 10

  jas_slider.Value = CInteger(ret_shell)
  jas_stav.Text = Subst("&1%", jas_slider.Value)
END

PUBLIC SUB getJas() AS Integer
  DIM ret_shell AS String
  SHELL "echo -n $( qdbus org.gnome.PowerManager /org/gnome/PowerManager/Backlight GetBrightness )" WAIT TO ret_shell
  RETURN CInteger(ret_shell)
END


PUBLIC SUB setJas(proc AS Integer)
  IF getJas() <> proc THEN
    SHELL Subst("qdbus org.gnome.PowerManager /org/gnome/PowerManager/Backlight SetBrightness &1 > /dev/null", proc) WAIT
    nactiJas()
  ENDIF 
END

PUBLIC SUB jas_plus_Click()
  DIM jas AS Integer
  jas = jas_slider.Value + 10
  setJas(jas)
END

PUBLIC SUB jas_minus_Click()
  DIM jas AS Integer
  jas = jas_slider.Value - 10
  setJas(jas)
END

PUBLIC SUB jas_slider_MouseUp()
  setJas(jas_slider.Value)
END

'hlavni casovac zarizeni
PUBLIC SUB casovac_Timer()
  IF existJas() THEN nactiJas()
  IF existHlasitost() THEN nactiHlasitost()
  IF existTouchepad() THEN nactiTouchpad()
  'IF existCpu() THEN nactiCpu()

  IF existCpu() THEN governorLabel.Text = governorText[getGovernor()]

  IF existAcpi() THEN nactiBaterii()
  IF existUptime() THEN nactiUptime()
  'deaktivovat kdyz je zabaleno!
  IF NOT ostatni_expander.Hidden THEN
    'webcam
    IF existApache() THEN nactiApache()
    IF existDropbox() THEN nactiDropbox()
    'casovac, shutdown
  ENDIF
  IF existSit() THEN nactiSit()

  'obnovovani informaci v tray
  IF tray <> NULL THEN 
    tray.Tooltip = Subst(("Jas: &1\n&2 (&3)\n&4\nCPU: &5"), jas_stav.Text, baterie_procento.Text, baterie_cas.Text, uptime_cas.Text, governorLabel.Text)
  ENDIF 

  IF Application.MainWindow.Minimized AND Settings["settings/minimizetray", FALSE] AND tray = NULL THEN 
    traycreate()  'schovani do tray
  ENDIF 

  runConditionGrid()
END


PRIVATE SUB runConditionGrid()
  IF autoModCheck.Value THEN FSettings.initConditionalGrid() 'provadeni podminenych prikazu
END


PUBLIC SUB nactiDropbox()
  DIM ret_shell AS String
  IF panel_dropbox.Enabled THEN 
    SHELL "echo -n $( dropbox status )" WAIT TO ret_shell
'TODO jeste rozlisovat jestli je pouze offline a nebo je zastaveny uplne
    dropbox_start_stop.Enabled = IIf(ret_shell = "Dropbox isn't responding!", FALSE, TRUE)

    'zastaven, 'bezi
    dropbox_start_stop.Text = IIf(ret_shell = $cmd_dropbox, ("Start"), ("Stop"))
    panel_dropbox.Tag = ret_shell
    panel_dropbox.ToolTip = IIf(panel_dropbox.Tag = $cmd_dropbox, ("Dropbox neběží"), ("Dropbox běží"))

    obrazek_drop.Picture = IIf(panel_dropbox.Tag = $cmd_dropbox, Picture["ikony/dropbox_off.png"], Picture["ikony/dropbox.png"])
  ENDIF 
END


PUBLIC SUB dropbox_start_stop_Click()
  'spusteni shellu
  SHELL Subst("dropbox &1", IIf(panel_dropbox.Tag = $cmd_dropbox, "start", "stop")) WAIT
  nactiDropbox()
END


PUBLIC SUB dropbox_restart_Click()
  SHELL "dropbox stop" WAIT
  SHELL "dropbox start" WAIT
  nactiDropbox()
END


PUBLIC SUB nactiApache()
  DIM ret_shell AS String
  DIM apache_cond AS Boolean

  IF panel_apache.Enabled THEN 
    SHELL "/etc/init.d/apache2 status" WAIT TO ret_shell

    IF ret_shell = "" THEN 
      'ret_shell = $cmd_apache2  '???
    ENDIF 

    apache_cond = (ret_shell = $cmd_apache OR ret_shell = $cmd_apache2)

    apache_start_stop.Text = IIf(apache_cond, ("Start"), ("Stop"))
    panel_apache.Tag = apache_cond  'prenaseni infa
    panel_apache.ToolTip = IIf(apache_cond, ("Apache2 neběží"), ("Apache2 beží"))

    obrazek_apache.Picture = IIf(apache_cond, Picture["ikony/apache_off.png"], Picture["ikony/apache.png"])
  ENDIF 
END


PUBLIC SUB apache_restart_Click()
  SHELL "gksudo /etc/init.d/apache2 restart" WAIT 
  nactiApache()
END


PUBLIC SUB apache_start_stop_Click()
  'spusteni shellu
  SHELL Subst("gksudo /etc/init.d/apache2 &1", IIf(panel_apache.Tag, "start", "stop")) WAIT
  nactiApache()
END


PRIVATE SUB Velikost(size AS Long) AS String
  DIM $symbol AS String[] = [("bajtů"), ("kB"), ("MB"), ("GB"), ("TB"), ("PB"), ("EB"), ("ZB"), ("YB")]
  DIM $exp, $conv AS Float

  IF size > 0 THEN 
    $exp = Fix(Log(size) / Log(1024)) 'floor
    $conv = (size / (1024 ^ Fix($exp))) 'floor
  ENDIF 

  RETURN CString(IIf($exp = 0, Round($conv, 0), Round($conv, -2))) & " " & $symbol[$exp]
END


PUBLIC SUB nactiSit()
  DIM active, prijato, odeslano, ret_shell AS String
  DIM pole, pole2 AS String[]
  
'FIXME nezchrousta via pripojeni!
  SHELL "echo -n $( ip route | awk '{print ($2 == \"via\" ? $5 : $3 )}' | head -n 1 )" WAIT TO active
  active = IIf(active, active, "lo")  'kdyz nebude zadna, pripoji loopback
  sit_active.Text = Subst(("Síť: &1"), active)

  'SHELL Subst("echo -n $( cat /proc/net/dev | sed 's/^ *//' | awk  -F':|[ \t]+' '/&1/ {print $2 }' )", active) WAIT TO prijato
  SHELL Subst("echo -n $( cat /proc/net/dev | sed 's/^ *//'|awk  -F ': *|[ \t]+' '/&1/ {print $2 }' )", active) WAIT TO prijato
  sit_prijato.Text = Velikost(CLong(prijato))
  'SHELL Subst("echo -n $( cat /proc/net/dev | sed 's/^ *//' | awk  -F':|[ \t]+' '/&1/ {print $10 }' )", active) WAIT TO odeslano
  SHELL Subst("echo -n $( cat /proc/net/dev | sed 's/^ *//'|awk  -F ': *|[ \t]+' '/&1/ { print $10 }' )", active) WAIT TO odeslano
  sit_odeslano.Text = Velikost(CLong(odeslano))
END


PUBLIC SUB nactiTouchpad()
  DIM ret_shell AS String
  IF panel_touchpad.Enabled THEN 
    SHELL "echo -n $( synclient -l | grep TouchpadOff | awk -F'= ' '{ print $2 }' )" WAIT TO ret_shell
'osetreni chyby pri nespravne konfiguraci!!
'http://www.linuxine.com/2008/06/how-to-disable-touchpad-in-ubuntu.html
    touchpad_start_stop.Text = IIf(ret_shell = "0", ("Zakazat"), ("Povolit"))
    panel_touchpad.Tag = ret_shell
    panel_touchpad.ToolTip = IIf(panel_touchpad.Tag = "0", ("Zapnuto"), ("Vypnuto"))
    obrazek_touchpad.Picture = IIf(panel_touchpad.Tag = "0", Picture["ikony/touchpad-enable-icon.png"], Picture["ikony/touchpad-disable-icon.png"])
  ENDIF 
END


PUBLIC SUB setTouchpad(stav AS Boolean)
  SHELL Subst("synclient TouchpadOff=&1", IIf(stav, 1, 0))
  nactiTouchpad()
END


PUBLIC SUB touchpad_start_stop_Click()
  setTouchpad(IIf(panel_touchpad.Tag = "0", 1, 0))
END


PUBLIC SUB getListMixer() AS String[]
  DIM ret_shell, item AS String
  DIM ret AS NEW String[]
  'prvich 5 polozek
  SHELL "amixer | grep 'Simple mixer control' | awk -F\\' '{ print $2 }' | head -n5" WAIT TO ret_shell
  FOR EACH item IN Split(ret_shell, "\n")
    IF item THEN 
      ret.Add(item)
    ENDIF
  NEXT 
  RETURN ret
END


PUBLIC SUB getListScreen() AS String[]
  DIM ret_shell AS String
  SHELL "echo -n $( xrandr | grep connected | grep -v disconnected | awk '{print $1}' )" WAIT TO ret_shell
  RETURN Split(ret_shell, " ")
END

PUBLIC SUB getCountActiveScreen() AS Integer
  DIM ret_shell AS String
  SHELL "echo -n $( xrandr | grep '*' | awk '{print $1}' )" WAIT TO ret_shell
  RETURN Split(ret_shell, " ").Count
END


PUBLIC SUB getActiveScreen() AS String
  DIM ret_shell AS String
  SHELL "echo -n $( xrandr | grep connected | grep -v disconnected | grep $( xrandr | grep '*' | awk '{print $1}' ) | awk '{print $1}' )" WAIT TO ret_shell
  RETURN ret_shell
END


PUBLIC SUB nastaveni_button_Click()
  autoModCheck.Value = FALSE  'bezpecnostni vypnuti podminenych prikazu
  IF FSettings.ShowModal() = 0 THEN
    autoModCheck.Value = TRUE 
    runConditionGrid()
  ENDIF 
END


PUBLIC SUB shutdown_start_Click()
  DIM ret AS String

  SHELL "gksudo ls > /dev/null" WAIT 
  '$shutdown = 
  SHELL Subst("sudo shutdown -&1 &2:&3 &", IIf(shutdown_restart.Value, "r", "h"), shutdown_hour.Text, shutdown_minute.Text) WAIT 

'TODO poradne posefovat!! informovat, overovat v casovaci state
  'PRINT $shutdown.Id + 1
  SHELL "ps ax | grep shutdown" TO ret
  DEBUG ret
  'TODO zjistovat na poet radku a odecitat -1!!!!!!!!

  'SHELL Subst("cat /proc/&1/cmdline", $shutdown.Id + 1)
  'cat /proc/7783/cmdline
END

PUBLIC SUB shutdown_kill_Click()
  SHELL "gksudo killall shutdown" WAIT 
  SHELL "gksudo killall shutdown" WAIT 
END

PUBLIC SUB manager_exec_Click()
  TRY SHELL Subst("&1 &", Settings["settings/manager", ""])
END


PUBLIC SUB trayhide_Click()
  traycreate()
  WAIT 0.1
  casovac_Timer() 'dodatecne naplneni pro tray
END


PRIVATE SUB traycreate()
  tray = NEW TrayIcon AS "Tray"
  tray.Picture = Picture["ikony/tray.png"]
  tray.Picture.Transparent = TRUE
  tray.Visible = TRUE
  ME.Hide() 'schovani okna  
END


PUBLIC SUB isTray() AS Boolean
  RETURN IIf(tray = NULL, TRUE, FALSE)
END


PRIVATE SUB trayclose()
  IF tray <> NULL THEN
    tray.Visible = FALSE
    tray.Delete()
    tray = NULL 'vynulovani pointeru
  ENDIF 
END


PUBLIC SUB Tray_MouseDown()
  IF Mouse.Left THEN 
    ME.Show()
    trayclose()
  ENDIF 
END


PUBLIC SUB cpuset_Click()
  setGovernor(cpuselect.Text)
END


' PUBLIC SUB profilesave_Click()
'   DIM nazev AS String
'   nazev = InputBox(("zadej název profilu"), ("Bateri pofil"), ("Název"))
'   IF nazev THEN 
'     $profiles.Add(nazev)
'     renderprofile()
'   ENDIF 
' END
' 
' 
' PRIVATE SUB renderprofile() 
'   DIM item AS String
'   profileselect.Clear
'   FOR EACH item IN $profiles
'     profileselect.Add(item)
'   NEXT
' END
' 
' 
' PRIVATE SUB loadProfile()
'   DIM count, i AS Integer
'   $profiles.Clear
'   count = Settings["custom/profilecount", 0]
'   FOR i = 0 TO count - 1
'     $profiles.Add(Settings["custom/profile" & i, ""])
'   NEXT 
'   renderprofile()
' END
' 
' 
' PRIVATE SUB saveprofile()
'   DIM item AS String
'   DIM index AS Integer
'   'ulozeni task
'   Settings["custom/profilecount"] = $profiles.length
'   FOR EACH item IN $profiles
'     Settings["custom/profile" & index] = item
'     INC index
'   NEXT 
' END


PUBLIC SUB aboutButton_Click()
  Message.Info(Subst(("Verze programu: &1\nAutoři: Geniv & Kubijo"), Application.Version))
END

PUBLIC SUB autoModCheck_Click()
  jas_minus.Enabled = NOT autoModCheck.Value
  jas_slider.Enabled = NOT autoModCheck.Value
  jas_plus.Enabled = NOT autoModCheck.Value

  touchpad_start_stop.Enabled = NOT autoModCheck.Value

  cpuselect.Enabled = NOT autoModCheck.Value
  cpuset.Enabled = NOT autoModCheck.Value
END
